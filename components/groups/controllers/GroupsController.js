// Generated by CoffeeScript 1.7.1
'use strict';
GroupsUserModule.controller('GroupsController', function($scope, $stateParams, $state, $timeout, $location, Loader, RestModel, Notification, LocalStorage, params, groups) {
  $scope.window = window;
  $scope.params = params;
  $scope.stateParams = $stateParams;
  $scope.loading = false;
  $scope.page = 1;
  $scope.pageSize = 4;
  $scope.offset = 0;
  $scope.topList = [
    {
      id: 0,
      name: 'Топ лист по лайкам'
    }, {
      id: 1,
      name: 'Топ лист по репостам'
    }, {
      id: 2,
      name: 'Топ лист по просмотрам'
    }
  ];
  $scope.selectedTopList = {
    list: {
      id: 0,
      name: 'Топ лист по лайкам'
    }
  };
  $scope.otherGroup = {};
  $scope.tops = [];
  $scope.groups = groups.response.items;
  $scope.returnListFriends = function() {
    return $state.transitionTo('friends');
  };
  $scope.getMoreinfo = function(group) {
    return $state.transitionTo('groupContent', {
      groupId: group.id
    });
  };
  $scope.searchGroup = function() {
    if ($scope.otherGroup.id) {
      return RestModel.getGroupById($scope.otherGroup.id, $scope.params).then(function(data) {
        $scope.groups = data.response;
        return $scope.tops = [];
      });
    }
  };
  $scope.searchTopWall = function() {
    $scope.tops = [];
    if ($scope.otherGroup.id) {
      return RestModel.getWallPost($scope.otherGroup.id, $scope.params, 1, true).then(function(data) {
        var count;
        if (data.error) {
          return Notification.error('Закрыт доступ к стене, выберите другую группу');
        } else {
          $scope.countWalls = data.response.count;
          $scope.loading = true;
          count = angular.copy($scope.countWalls);
          $scope.getPosts(count);
          return $scope.posts = [];
        }
      });
    }
  };
  $scope.searchFivePostToWeek = function() {
    $scope.tops = [];
    if ($scope.otherGroup.id) {
      return RestModel.getWallPost($scope.otherGroup.id, $scope.params, 100, true).then(function(data) {
        var inWeek, today;
        if (data.error) {
          return Notification.error('Закрыт доступ к стене, выберите другую группу');
        } else {
          $scope.loading = true;
          $scope.endPosts = false;
          today = new Date();
          inWeek = new Date();
          inWeek.setDate(today.getDate() - 7);
          inWeek = moment(inWeek).format('x');
          $scope.posts = [];
          angular.forEach(data.response.items, function(item, index) {
            if (moment.unix(item.date) > moment(parseInt(inWeek)) && index !== 0) {
              $scope.posts.push(item);
              return $scope.endPosts = false;
            } else {
              return $scope.endPosts = true;
            }
          });
          if (!$scope.endPosts) {
            return RestModel.getAllWallPostExecute($scope.otherGroup.id, $scope.params, 2500, 100).then(function(data) {
              angular.forEach(data, function(item) {
                if (moment.unix(item.date) > moment(parseInt(inWeek))) {
                  return $scope.posts.push(item);
                }
              });
              $scope.loading = false;
              $scope.countWalls = $scope.posts.length;
              $scope.procent = 100;
              return $scope.topLikes($scope.posts, 5);
            });
          } else {
            $scope.loading = false;
            $scope.countWalls = $scope.posts.length;
            $scope.procent = 100;
            return $scope.topLikes($scope.posts, 5);
          }
        }
      });
    }
  };
  $scope.getPosts = function(count) {
    $scope.procent = 100 - Math.floor(count * 100 / $scope.countWalls);
    Loader.process($scope.procent);
    if (count < 2500) {
      return $timeout(function() {
        return RestModel.getAllWallPostExecute($scope.otherGroup.id, $scope.params, count, $scope.offset).then(function(response) {
          $scope.offset = 0;
          $scope.topPostsArray(response, true);
          $scope.loading = false;
          return $scope.procent = 100;
        }, function(error) {
          $scope.loading = false;
          return Notification.error('Произошла ошибка ' + error.error_msg + '. Попробуйте еще раз');
        });
      }, 355);
    } else {
      return $timeout(function() {
        return RestModel.getAllWallPostExecute($scope.otherGroup.id, $scope.params, count, $scope.offset).then(function(response) {
          $scope.offset = $scope.offset + 2500;
          count = count - 2500;
          $scope.topPostsArray(response);
          return $scope.getPosts(count);
        }, function(error) {
          $scope.loading = false;
          return Notification.error('Произошла ошибка ' + error.error_msg + '. Попробуйте еще раз');
        });
      }, 355);
    }
  };
  $scope.topPostsArray = function(items, end) {
    if (end == null) {
      end = null;
    }
    angular.forEach(items, function(item) {
      return $scope.posts.push(item);
    });
    if (end) {
      return $scope.topLikes($scope.posts, 10);
    }
  };
  $scope.getTransformPost = function(posts) {
    return angular.forEach(posts, function(post) {
      post.date = moment.unix(post.date).format('DD.MM.YYYY HH:mm');
      return post.url = 'https://vk.com//wall-' + $scope.otherGroup.id + '?own=1&w=wall-' + $scope.otherGroup.id + '_' + post.id;
    });
  };
  $scope.topLikes = function(items, count) {
    $scope.tops = [];
    $scope.tops = angular.copy(items);
    angular.forEach($scope.tops, function(item, index) {
      if (item.likes.count === 0) {
        return $scope.tops.splice(index, 1);
      }
    });
    $scope.tops.sort(RestModel.sortByLikes);
    $scope.tops = $scope.tops.splice(0, count);
    $scope.countBest = $scope.tops.length < 5 ? $scope.tops.length : count;
    return $scope.getTransformPost($scope.tops);
  };
  $scope.topReposts = function(items) {
    $scope.tops = [];
    $scope.tops = angular.copy(items);
    angular.forEach($scope.tops, function(item, index) {
      if (item.reposts.count === 0) {
        return $scope.tops.splice(index, 1);
      }
    });
    items.sort(RestModel.sortByReposts);
    $scope.tops = $scope.tops.splice(0, 10);
    return $scope.getTransformPost($scope.tops);
  };
  $scope.topViews = function(items) {
    $scope.tops = [];
    $scope.tops = angular.copy(items);
    angular.forEach($scope.tops, function(item, index) {
      if (item.views) {
        if (item.views.count === 0) {
          return $scope.tops.splice(index, 1);
        }
      } else {
        return $scope.tops.splice(index, 1);
      }
    });
    items.sort(RestModel.sortByViews);
    $scope.tops = $scope.tops.splice(0, 10);
    return $scope.getTransformPost($scope.tops);
  };
  return $scope.changeTopList = function() {
    if ($scope.selectedTopList.list.id === 0) {
      return $scope.topLikes($scope.posts, 10);
    } else if ($scope.selectedTopList.list.id === 1) {
      return $scope.topReposts($scope.posts);
    } else if ($scope.selectedTopList.list.id === 2) {
      return $scope.topViews($scope.posts);
    }
  };
});

//# sourceMappingURL=GroupsController.map
