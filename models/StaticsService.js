// Generated by CoffeeScript 1.7.1

/*
 *StaticsService#
Сервис статистики
 */
'use strict';
MainModule.service('Static', function($timeout, $q, RestModel, Loader, Notification) {
  var Static;
  Static = (function() {
    function Static() {}

    Static.prototype.resultFriends = [];

    Static.prototype.resultUserProfilePhoto = [];

    Static.prototype.params = null;

    Static.prototype.getListCountFriends = function(friends) {
      var tempFriendsArray;
      if (friends.length > 25) {
        tempFriendsArray = friends.splice(0, 25);
        return $timeout((function(_this) {
          return function() {
            return RestModel.getAllCountFriends(tempFriendsArray, _this.params).then(function(data) {
              angular.forEach(data.response, function(user) {
                return _this.resultFriends.push(user[0]);
              });
              return _this.getListCountFriends(friends);
            }, function(error) {
              return Notification.error(error);
            });
          };
        })(this), 330);
      } else {
        if (friends.length !== 0) {
          return $timeout((function(_this) {
            return function() {
              return RestModel.getAllCountFriends(friends, _this.params).then(function(data) {
                angular.forEach(data.response, function(user) {
                  return _this.resultFriends.push(user[0]);
                });
                _this.resultFriends = _this.resultFriends.sort(_this.sortableFriends);
                _this.resultFriends = Loader.renderBand(_this.resultFriends);
                return _this.resultFriends;
              });
            };
          })(this), 330);
        }
      }
    };

    Static.prototype.sortableFriends = function(a, b) {
      return b.counters.friends - a.counters.friends;
    };

    Static.prototype.getPhotoProfileFriends = function(friends, date) {
      var tempFriends;
      if (friends.length > 25) {
        tempFriends = friends.splice(0, 25);
        return $timeout((function(_this) {
          return function() {
            return RestModel.getProfilePhoto(tempFriends, _this.params).then(function(data) {
              angular.forEach(data.response, function(item, index) {
                if (item.items[0] && item.items[0].date) {
                  if (item.items[0].date > date) {
                    angular.forEach(tempFriends, function(friend) {
                      if (item.items[0].owner_id === friend.id) {
                        item.items[0].first_name = friend.first_name;
                        return item.items[0].last_name = friend.last_name;
                      }
                    });
                    return _this.resultUserProfilePhoto.push(data.response[index].items);
                  }
                }
              });
              return _this.getPhotoProfileFriends(friends, date);
            }, function(error) {
              return Notification.error(error);
            });
          };
        })(this), 330);
      } else {
        if (friends.length !== 0) {
          return $timeout((function(_this) {
            return function() {
              return RestModel.getProfilePhoto(friends, _this.params).then(function(data) {
                var test;
                angular.forEach(data.response, function(item, index) {
                  if (item.items[0] && item.items[0].created) {
                    if (item.items[0].created > date) {
                      angular.forEach(friends, function(friend) {
                        if (item.items[0].owner_id === friend.id) {
                          item.items[0].first_name = friend.first_name;
                          return item.items[0].last_name = friend.last_name;
                        }
                      });
                      return _this.resultUserProfilePhoto.push(data.response[index].items);
                    }
                  }
                });
                test = angular.copy(_this.resultUserProfilePhoto);
                _this.resultUserProfilePhoto = [];
                return test;
              });
            };
          })(this), 330);
        }
      }
    };

    Static.prototype.getHideFriendsList = function(count, array, userId, result) {
      var localUsers;
      localUsers = [];
      if (count < 25) {
        return $timeout((function(_this) {
          return function() {
            return RestModel.getFriendsExecute(array, _this.params, userId).then(function(response) {
              angular.forEach(response, function(user) {
                if (user.hide) {
                  return result.push(user);
                }
              });
              return result;
            }, function(error) {
              return Notification.error('Произошла ошибка, обновите страницу ' + error.error_msg);
            });
          };
        })(this), 350);
      } else {
        localUsers = array.splice(0, 25);
        return $timeout((function(_this) {
          return function() {
            return RestModel.getFriendsExecute(localUsers, _this.params, userId).then(function(response) {
              angular.forEach(response, function(user) {
                if (user.hide) {
                  return result.push(user);
                }
              });
              count = count - 25;
              return _this.getHideFriendsList(count, array, userId, result);
            }, function(error) {
              return Notification.error('Произошла ошибка, обновите страницу ' + error.error_msg);
            });
          };
        })(this), 350);
      }
    };

    Static.prototype.getFriends = function(array, result) {
      var user;
      user = array.splice(0, 1);
      return $timeout((function(_this) {
        return function() {
          return RestModel.moreInfo(parseInt(user[0].id), _this.params).then(function(data) {
            result.push(data.response[0]);
            if (array.length !== 0) {
              return _this.getFriends(array, result);
            } else {
              return result;
            }
          }, function(error) {
            Notification.error('Произошла ошибка ' + error.error_msg);
            return error;
          });
        };
      })(this), 330);
    };

    Static.prototype.filterFriendsListForFamilyStatus = function(friends) {
      var activeArray, complicatedArray, engagedArray, hideStatusArray, listFriends, lovedArray, marriedArray, meetingArray, notMarriedArray, notStatusArray;
      listFriends = angular.copy(friends);
      notStatusArray = [];
      notMarriedArray = [];
      meetingArray = [];
      engagedArray = [];
      marriedArray = [];
      complicatedArray = [];
      activeArray = [];
      lovedArray = [];
      hideStatusArray = [];
      angular.forEach(listFriends, function(friend) {
        if (friend.relation === 1) {
          return notMarriedArray.push(friend);
        } else if (friend.relation === 2) {
          return meetingArray.push(friend);
        } else if (friend.relation === 3) {
          return engagedArray.push(friend);
        } else if (friend.relation === 4) {
          return marriedArray.push(friend);
        } else if (friend.relation === 5) {
          return complicatedArray.push(friend);
        } else if (friend.relation === 6) {
          return activeArray.push(friend);
        } else if (friend.relation === 7) {
          return lovedArray.push(friend);
        } else {
          if (friend.relation === 0) {
            return notStatusArray.push(friend);
          } else {
            return hideStatusArray.push(friend);
          }
        }
      });
      return [notStatusArray, notMarriedArray, meetingArray, engagedArray, marriedArray, complicatedArray, activeArray, lovedArray, hideStatusArray];
    };

    Static.prototype.filterFriendsListForParams = function(friends, params) {
      var listFriends, notParamsArray, yesParamsArray;
      listFriends = angular.copy(friends);
      yesParamsArray = [];
      notParamsArray = [];
      angular.forEach(listFriends, function(friend) {
        if (Array.isArray(friend[params])) {
          if (friend[params].length > 0) {
            return yesParamsArray.push(friend);
          } else {
            return notParamsArray.push(friend);
          }
        } else {
          if (friend[params] === 1) {
            return yesParamsArray.push(friend);
          } else {
            return notParamsArray.push(friend);
          }
        }
      });
      return [yesParamsArray, notParamsArray];
    };

    return Static;

  })();
  return new Static();
});

//# sourceMappingURL=StaticsService.map
